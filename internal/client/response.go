package client

// DO NOT EDIT
//
// This file was generated by ./schema.sh

import (
	"fmt"

	"github.com/CanonicalLtd/dqlite/internal/bindings"
)

// DecodeWelcome decodes a Welcome response.
func DecodeWelcome(response *Message) (heartbeatTimeout uint64, err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseWelcome {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	heartbeatTimeout = response.GetUint64()

	return
}

// DecodeServer decodes a Server response.
func DecodeServer(response *Message) (address string, err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseServer {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	address = response.GetString()

	return
}

// DecodeServers decodes a Servers response.
func DecodeServers(response *Message) (servers Servers, err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseServers {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	servers = response.GetServers()

	return
}

// DecodeDb decodes a Db response.
func DecodeDb(response *Message) (id uint32, err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseDb {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	id = response.GetUint32()
	response.GetUint32()

	return
}

// DecodeStmt decodes a Stmt response.
func DecodeStmt(response *Message) (db uint32, id uint32, params uint64, err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseStmt {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	db = response.GetUint32()
	id = response.GetUint32()
	params = response.GetUint64()

	return
}

// DecodeEmpty decodes a Empty response.
func DecodeEmpty(response *Message) (err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseEmpty {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	response.GetUint64()

	return
}

// DecodeResult decodes a Result response.
func DecodeResult(response *Message) (result Result, err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseResult {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	result = response.GetResult()

	return
}

// DecodeRows decodes a Rows response.
func DecodeRows(response *Message) (rows Rows, err error) {
	mtype, _ := response.GetHeader()

	if mtype == bindings.ResponseFailure {
		e := ErrRequest{}
		e.Code = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype == bindings.ResponseDbError {
		e := ErrDb{}
		e.Code = response.GetUint64()
		e.ExtendedCode = response.GetUint64()
		e.Description = response.GetString()
                err = e
                return
	}

	if mtype != bindings.ResponseRows {
		err = fmt.Errorf("unexpected response type %d", mtype)
                return
	}

	rows = response.GetRows()

	return
}
